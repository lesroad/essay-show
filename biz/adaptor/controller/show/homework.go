// Code generated by hertz generator.

package show

import (
	"context"
	"essay-show/biz/adaptor"
	"essay-show/biz/application/dto/essay/show"
	"essay-show/provider"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateHomework .
// @router /homework/create [POST]
func CreateHomework(ctx context.Context, c *app.RequestContext) {
	var err error
	var req show.CreateHomeworkReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.HomeworkService.CreateHomework(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// ListHomeworks .
// @router /homework/list [GET]
func ListHomeworks(ctx context.Context, c *app.RequestContext) {
	var err error
	var req show.ListHomeworksReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.HomeworkService.ListHomeworks(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GetHomework .
// @router /homework/get [GET]
func GetHomework(ctx context.Context, c *app.RequestContext) {
	var err error
	var req show.GetHomeworkReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.HomeworkService.GetHomework(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// SubmitHomework .
// @router /homework/submit [POST]
func SubmitHomework(ctx context.Context, c *app.RequestContext) {
	var err error
	var req show.SubmitHomeworkReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.HomeworkService.SubmitHomework(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GetHomeworkSubmissions .
// @router /homework/submissions [GET]
func GetHomeworkSubmissions(ctx context.Context, c *app.RequestContext) {
	var err error
	var req show.GetHomeworkSubmissionsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.HomeworkService.GetHomeworkSubmissions(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GradeHomework .
// @router /homework/grade [POST]
func GradeHomework(ctx context.Context, c *app.RequestContext) {
	var err error
	var req show.GradeHomeworkReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.HomeworkService.GradeHomework(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}
