// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"essay-show/biz/application/service"
	"essay-show/biz/infrastructure/cache"
	"essay-show/biz/infrastructure/config"
	"essay-show/biz/infrastructure/repository/attend"
	"essay-show/biz/infrastructure/repository/class"
	"essay-show/biz/infrastructure/repository/exercise"
	"essay-show/biz/infrastructure/repository/feedback"
	"essay-show/biz/infrastructure/repository/homework"
	"essay-show/biz/infrastructure/repository/invitation"
	"essay-show/biz/infrastructure/repository/log"
	"essay-show/biz/infrastructure/repository/question_bank"
	"essay-show/biz/infrastructure/repository/user"
)

// Injectors from wire.go:

func NewProvider() (*Provider, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	mongoMapper := user.NewMongoMapper(configConfig)
	attendMongoMapper := attend.NewMongoMapper(configConfig)
	codeMongoMapper := invitation.NewCodeMongoMapper(configConfig)
	logMongoMapper := invitation.NewLogMongoMapper(configConfig)
	userService := service.UserService{
		UserMapper:   mongoMapper,
		AttendMapper: attendMongoMapper,
		CodeMapper:   codeMongoMapper,
		LogMapper:    logMongoMapper,
	}
	mongoMapper2 := log.NewMongoMapper(configConfig)
	downloadCacheMapper := cache.NewDownloadCacheMapper(configConfig)
	essayService := service.EssayService{
		LogMapper:           mongoMapper2,
		UserMapper:          mongoMapper,
		DownloadCacheMapper: downloadCacheMapper,
	}
	stsService := service.StsService{
		UserMapper: mongoMapper,
	}
	exerciseMongoMapper := exercise.NewMongoMapper(configConfig)
	exerciseService := service.ExerciseService{
		ExerciseMapper: exerciseMongoMapper,
		LogMapper:      mongoMapper2,
		UserMapper:     mongoMapper,
	}
	feedbackMongoMapper := feedback.NewMongoMapper(configConfig)
	feedBackService := service.FeedBackService{
		FeedbackMapper: feedbackMongoMapper,
		UserMapper:     mongoMapper,
	}
	classMongoMapper := class.NewMongoMapper(configConfig)
	memberMongoMapper := class.NewMemberMongoMapper(configConfig)
	classService := &service.ClassService{
		ClassMapper:  classMongoMapper,
		MemberMapper: memberMongoMapper,
		UserMapper:   mongoMapper,
	}
	homeworkMongoMapper := homework.NewMongoMapper(configConfig)
	submissionMongoMapper := homework.NewSubmissionMongoMapper(configConfig)
	serviceEssayService := &service.EssayService{
		LogMapper:           mongoMapper2,
		UserMapper:          mongoMapper,
		DownloadCacheMapper: downloadCacheMapper,
	}
	homeworkService := &service.HomeworkService{
		HomeworkMapper:   homeworkMongoMapper,
		SubmissionMapper: submissionMongoMapper,
		ClassMapper:      classMongoMapper,
		UserMapper:       mongoMapper,
		EssayService:     serviceEssayService,
	}
	mySQLMapper, err := question_bank.NewMySQLMapperFromConfig(configConfig)
	if err != nil {
		return nil, err
	}
	questionBankService := &service.QuestionBankService{
		QuestionBankMapper: mySQLMapper,
	}
	providerProvider := &Provider{
		Config:              configConfig,
		UserService:         userService,
		EssayService:        essayService,
		StsService:          stsService,
		ExerciseService:     exerciseService,
		FeedBackService:     feedBackService,
		ClassService:        classService,
		HomeworkService:     homeworkService,
		QuestionBankService: questionBankService,
	}
	return providerProvider, nil
}
